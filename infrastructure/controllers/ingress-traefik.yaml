---
apiVersion: v1
kind: Namespace
metadata:
  name: traefik
  labels:
    toolkit.fluxcd.io/tenant: sre-team
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: traefik
  namespace: traefik
spec:
  interval: 24h
  url: https://traefik.github.io/charts
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: ingress-traefik
  namespace: traefik
spec:
  interval: 30m
  chart:
    spec:
      chart: traefik
      version: "*"
      sourceRef:
        kind: HelmRepository
        name: traefik
        namespace: traefik
      interval: 12h
  values:
    additionalArguments:
      - --entrypoints.websecure.http.tls.certresolver=cloudflare
      - --entrypoints.websecure.http.tls.domains[0].main=home-server.dev
      - --entrypoints.websecure.http.tls.domains[0].sans=*.home-server.dev
    #  - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
    #  - --certificatesresolvers.cloudflare.acme.email=Jonas@Hess.pm
    #  - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1
    #  - --certificatesresolvers.cloudflare.acme.storage=/data/dns_acme.json
    #env:
    #  - name: CF_API_EMAIL
    #    valueFrom:
    #      secretKeyRef:
    #        key: email
    #        name: cloudflare-api-credentials
    #  - name: CF_DNS_API_TOKEN
    #    valueFrom:
    #      secretKeyRef:
    #        key: apiKey
    #        name: cloudflare-api-credentials

    tls:
      enabled: false
      # this is the name of a TLSOption definition
    #  options: ""
    #  certResolver: "cloudflare"

    #persistence:
    #  enabled: true
    #  path: /certs
    #  size: 128Mi

    #persistence:
    #  # -- Enable persistence using Persistent Volume Claims
    #  # ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    #  # It can be used to store TLS certificates, see `storage` in certResolvers
    #  enabled: true
    #  name: traefik-data
    #  existingClaim: "pvc-traefik-data"
    #  accessMode: ReadWriteMany
    #  size: 128Mi
    #  storageClass: "nfs"
    #  volumeName: "traefik-pv"
    #  path: /data
    #  annotations: {}
    #  # -- Only mount a subpath of the Volume into the pod
    #  # subPath: ""

    service:
      enabled: true
      type: NodePort
    ssl:
      enforced: false
      permanentRedirect: false
      upstream: false
      insecureSkipVerify: true
    ports:
      web:
        port: 80
      websecure:
        port: 443

    kubernetesIngress:
      enabled: true
      allowExternalNameServices: false
      allowEmptyServices: false
    logs:
      # Traefik logs concern everything that happens to Traefik itself (startup, configuration, events, shutdown, and so on).
      general:
        # By default, the logs use a text format (common), but you can
        # also ask for the json format in the format option
        # format: json
        # By default, the level is set to ERROR. Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
        level: DEBUG
      access:
        # To enable access logs
        enabled: true

    serversTransport:
      insecureSkipVerify: true

    ingressRoute:
      dashboard:
        enabled: true # We will use a custom inrgessRoute with basic auth instead of the default one
        insecure: true

    # The following lines are needed if you have an error like: error while building entryPoint web: error preparing server: error opening listener: listen tcp :80: bind: permission denied
    # It just means that Traefik is unable to listen to connections on the host because of a lack of permissions.
    # Hence the need for aditionnal permissions.
    securityContext:
      capabilities:
        drop: [ALL]
        add: [NET_BIND_SERVICE]
      readOnlyRootFilesystem: true
      runAsGroup: 0
      runAsNonRoot: false
      runAsUser: 0
